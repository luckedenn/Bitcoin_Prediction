# -*- coding: utf-8 -*-
"""Bitcoin

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MDp2JyKb27uqnQGgEXn6Se2EE0KmfpZQ

# Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.callbacks import EarlyStopping

"""# Load Dataset"""

from google.colab import files
files.upload()  # upload kaggle.json

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download Bitcoin dataset
!kaggle datasets download -d mczielinski/bitcoin-historical-data
!unzip -o bitcoin-historical-data.zip

df = pd.read_csv('btcusd_1-min_data.csv')
df.head()

"""# EDA"""

# Lihat ukuran dari dataset
print(df.shape)

# Melihat Info data
print(df.info())

# Tampilkan nilai null
print("\nCek nilai kosong:")
print(df.isnull().sum())

# Tampilkan deskripsi data
print("Statistik deskriptif:")
df.describe()

df.hist(bins=20, legend=False, figsize=(20, 15))
plt.show()

"""# Data Preprocessing"""

# Menghapus nilai kosong
df.dropna(inplace=True)

# Ubah timestamp ke datetime
df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='ms')

# Set index sebagai waktu
df.set_index('Timestamp', inplace=True)

df = df.resample('1D').mean().dropna()

df = df[['Close']]

# Normalisasi
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Buat Time Series Dataset
def create_sequences(data, n_steps):
    X, y = [], []
    for i in range(n_steps, len(data)):
        X.append(data[i - n_steps:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

n_steps = 60
X, y = create_sequences(scaled_data, n_steps)
X = X.reshape((X.shape[0], X.shape[1], 1))  # [samples, timesteps, features]

# Step 5: Split Train & Test
split = int(0.8 * len(X))
X_train, y_train = X[:split], y[:split]
X_test, y_test = X[split:], y[split:]

"""# Modelling"""

# Build LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(n_steps, 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# Train
early_stop = EarlyStopping(monitor='val_loss', patience=5)
history = model.fit(
    X_train, y_train,
    validation_data=(X_test, y_test),
    epochs=20,
    batch_size=64,
    callbacks=[early_stop],
    verbose=1
)

# Predict
y_pred = model.predict(X_test)
y_pred_inv = scaler.inverse_transform(y_pred.reshape(-1, 1))
y_test_inv = scaler.inverse_transform(y_test.reshape(-1, 1))

"""# Evaluasi"""

mae = mean_absolute_error(y_test_inv, y_pred_inv)
rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))
r2 = r2_score(y_test_inv, y_pred_inv)

print(f"MAE  : {mae:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"RÂ²   : {r2:.2f}")

plt.figure(figsize=(14,6))
plt.plot(y_test_inv, label='Actual')
plt.plot(y_pred_inv, label='Predicted')
plt.title('Prediksi Harga Bitcoin dengan LSTM')
plt.xlabel('Index')
plt.ylabel('Harga Penutupan (Close)')
plt.legend()
plt.grid()
plt.show()